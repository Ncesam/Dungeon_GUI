import React, {FC, useEffect, useState} from "react";
import Input from "@/ui/Input";
import Button from "@/ui/Button";
import {ButtonType} from "@/ui/Button.props";
import PopupAddItem from "@/ui/PopupAddItem";
import ItemsList from "@/components/ItemsList";
import {fetchItems} from "@/services/itemsService";
import {notify} from "@/utils/notify";
import {startBot, stopBot} from "@/services/botService";


const MainPage: FC = () => {
    const [vkToken, setVkToken] = useState<string>("");
    const [urlItem, setUrlItem] = useState<string>("");
    const [maxPrice, setMaxPrice] = useState<number>(10000);
    const [delay, setDelay] = useState<number>(50);

    const [items, setItems] = useState<DungeonItem[]>([]);
    const [selectedItem, setSelectedItem] = useState<DungeonItem | null>(null);

    const validateForm = () => {
        if (!selectedItem) {
            notify.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç");
            return false;
        }

        if (urlItem.trim() === "") {
            notify.error("–í–≤–µ–¥–∏—Ç–µ URL");
            return false;
        }

        if (vkToken.trim() === "") {
            notify.error("–í–≤–µ–¥–∏—Ç–µ VK Token");
            return false;
        }

        return true;
    };
    const callBotAction = async (action: "start" | "stop") => {
        if (!validateForm()) return;

        try {
            const service = action === "start" ? startBot : stopBot;
            const result = await service(urlItem, {
                delay,
                name: selectedItem!.name,
                itemId: selectedItem!.id,
                vkToken,
                maxPrice
            });

            if (result.ok) {
                notify.success(`–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ ${action === "start" ? "–∑–∞–ø—É—â–µ–Ω üöÄ" : "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚èπÔ∏è"}`);
            } else {
                notify.error(result.error || `–ù–µ —É–¥–∞–ª–æ—Å—å ${action === "start" ? "–∑–∞–ø—É—Å—Ç–∏—Ç—å" : "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"} –±–æ—Ç–∞`);
            }
        } catch (err) {
            notify.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${action === "start" ? "–∑–∞–ø—É—Å–∫–µ" : "–æ—Å—Ç–∞–Ω–æ–≤–∫–µ"} –±–æ—Ç–∞`);
            console.error(err);
        }
    };

    useEffect(() => {
        (async () => {
            const result = await fetchItems()
            if (result.data) {
                setItems(result.data);
            } else {
                console.log("–û—à–∏–±–∫–∞", result.error);
            }
        })()
    }, []);
    return (
        <div className={"w-full h-full flex flex-col items-center gap-10 justify-center"}>
            <div className={"w-full flex justify-center items-center"}>
                <ItemsList items={items} selectedItem={selectedItem} onSelect={setSelectedItem}/>
                <div className={"w-1/2 h-full flex flex-col items-center"}>
                    <Input label={"–ê—É–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω—ã–π –∫–ª—é—á"} value={vkToken} setValue={setVkToken}/>
                    <Input label={"URL –ø—Ä–µ–¥–º–µ—Ç–∞"} value={urlItem} setValue={setUrlItem}/>
                    <Input label={"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"} value={maxPrice} setValue={setMaxPrice}/>
                    <Input label={"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞–∫–∞–º–∏"} value={delay} setValue={setDelay}/>
                </div>
            </div>
            <div className={"w-3/4 flex items-center justify-center"}>
                <Button type={ButtonType.submit} onClick={() => callBotAction("start")}>–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</Button>
                <Button type={ButtonType.delete} onClick={() => callBotAction("stop")}>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞</Button>
                <PopupAddItem/>
                <Button type={ButtonType.submit} onClick={() => null}>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—ã–±–∞–ª–∫—É</Button>
                <Button type={ButtonType.delete} onClick={() => null}>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—ã–±–∞–ª–∫—É</Button>
            </div>

        </div>
    )
}


export default MainPage;


